
require 'lib/schema.rb'

task :default => :documents

figures = []

Dir["documents/*"].each do |dir|
  dir_name = dir.sub(/^documents\//, '')
  # Para cada archivo que calza con el patrón "dia-*.dia, creamos dos tareas:
  # para convertirlo en SVG y luego en PDF. Cada uno de estos documentos PDF
  # serán incluidos en el documento final, por lo que son agregados al arreglo
  # figure para indicar que son requisitos en la tarea documento.pdf.
  figures = []
  Dir[dir + "/diagrams/*.dia"].each do |dia|
    svg = dia.sub(/.dia$/, ".svg")
    pdf = dia.sub(/.dia$/, ".pdf")
    file svg => dia do
      system "dia -e #{svg} -t svg #{dia}"
    end
    file pdf => svg do
      system "inkscape -z --file=#{svg} --export-pdf=#{pdf}"
    end
    figures << pdf
  end
  desc "Se generan los diagramas para el documento #{dir_name}."
  task (dir_name + "_dia").to_sym => figures
  desc "Se borran los diagramas generados para el documento #{dir_name}."
  task (dir_name + "_dia_clean").to_sym do
    system "rm -f documents/#{dir_name}/diagrams/*.svg"
    system "rm -f documents/#{dir_name}/diagrams/*.pdf"
  end
end

node_predicates = Dir['node_predicates/node_*.tex']
node_classes    = Dir['node_classes/*node_*.tex']

# Esta función remueve caracteres no ascci para generar los nombres de los
# archivos TEX. Esto porque se van a inlcuir y el método input no soporta
# caracteres extendidos.
def file_name(res)
  file_name = res.sub(/^#/, '').sub(/^@/, '')
  file_name = file_name.gsub('á','a').gsub('é','e').gsub('í','i').gsub('ó','o').gsub('ú','u')
  file_name = file_name.gsub('Á','A').gsub('É','E').gsub('Í','I').gsub('Ó','O').gsub('Ú','U')
  file_name = file_name.gsub('ñ','n').gsub('Ñ','N')
  file_name + ".tex"
end

# Esta función escribe las asociaciones de una clase en un archivo TEX.
def write_class(c, file)
  file << "\\item[{\\sf Atributos salientes:}] \\hfill \\\\\n"
  file << "  \\begin{tabular}{ll}\n"
  file << "    {\\em predicado} & {\\em objetos} \\\\\n"
  c[:out].each { |pred,v| file << "    #{pred}: & #{v.map{ |x| '\\' + x }.join(' ')} \\\\\n" }
  file << "  \\end{tabular}\n"
  file << "\\item[{\\sf Atributos entrantes:}] \\hfill \\\\\n"
  file << "  \\begin{tabular}{ll}\n"
  file << "    {\\em predicado} & {\\em sujetos} \\\\\n"
  c[:in].each { |pred,v| file << "    #{pred}: & #{v.map{ |x| '\\' + x }.join(' ')} \\\\\n" }
  file << "  \\end{tabular}\n"
end

# Esta función escribe las asociaciones de un predicado en un archivo TEX.
def write_predicate(pred, file)
  file << "\\item[{\\sf Elementos relacionados:}] \\hfill \\\\\n"
  file << "  \\begin{tabular}{ll}\n"
  file << "    {\\em sujeto} & {\\em objeto} \\\\\n"
  pred[:pairs].each { |e| file << "    \\#{e[0]} & \\#{e[1]} \\\\\n" }
  file << "  \\end{tabular}\n"
  # unless File.exist?("node_" + file_name(pred))
  #   file = File.new("node_" + file_name(pred), 'w')
  #   file << "\\subsubsection{#{pred}}\n\n"
  #   file << "\\begin{description}\n"
  #   file << "  \\input{#{file_name(pred)}}"
  #   file << "\\end{description}\n"
  # end
end

# Carga los esquemas.
schema  = Schema.new
schemas = Dir['schemas/yaml/*.yaml']
schemas.each { |yaml| schema.add(yaml) }

documents = {}

# Genera todos las relaciones para los predicados en cada documento.
Dir['documents/*'].each do |dir|
  documents[dir] = { :predicate_files => [], :class_files => [] }
  predicates_dir = dir + "/predicates"  
  Dir.mkdir predicates_dir if Dir[predicates_dir].empty?
  schema.elements(:predicates).each do |k|
    predicate_name = file_name(k[:name])
    predicate_file  = File.join(predicates_dir, predicate_name)
    documents[dir][:predicate_files] << predicate_file
    desc "Generate file #{predicate_file}"
    file predicate_file do
      puts "#creating #{file_name(k[:name])}"
      write_predicate(k, File.new(predicate_file, "w"))
    end
  end
  desc "Generate files for predicates in #{dir}/predicates."
  task (dir.sub(/^documents\//, '') + '_predicates').to_sym => documents[dir][:predicate_files]
  desc "Generate file #{dir}/predicates.tex"
  file dir + '/predicates.tex' => documents[dir][:predicate_files] do
    puts "Generating #{dir}/predicates.tex"
    f = File.new(dir + "/predicates.tex", "w")
    puts predicates_dir
    Dir[predicates_dir + "/*.tex"].sort.each do |k|
      f << "\\input{#{k.sub(dir + '/predicates/', '../../schemas/predicates/')}}\n"
    end
  end
end

# Genera todos las relaciones para las clases en cada documento.
Dir['documents/*'].each do |dir|
  classes_dir = dir + "/classes"
  Dir.mkdir classes_dir if Dir[classes_dir].empty?
  schema.elements(:classes).each do |k|
    class_name = file_name(k[:name])
    class_file  = File.join(classes_dir, class_name)
    documents[dir][:class_files] << class_file
    desc "Generate file #{class_file}"
    file class_file do
      puts "#creating #{file_name(k[:name])}"
      write_class(k, File.new(class_file, "w"))
    end
  end
  desc "Generate files for classes in #{dir}/classes."
  task (dir.sub(/^documents\//, '') + '_classes').to_sym => documents[dir][:class_files]
  desc "Generate file #{dir}/classes.tex"
  file dir + '/classes.tex' => documents[dir][:class_files] do
    puts "Generating #{dir}/classes.tex"
    f = File.new(dir + "/classes.tex", "w")
    puts classes_dir
    Dir[classes_dir + "/*.tex"].sort.each do |k|
      f << "\\input{#{k.sub(dir + '/classes/', '../../schemas/classes/')}}\n"
    end
  end
end

# Para crear el archivo PDF...
Dir['documents/*'].each do |dir|
  document = dir + "/documento.pdf"
  file document => figures + [document.sub(/.pdf$/, '.tex')] + [dir + '/classes.tex', dir + '/predicates.tex'] do
    system "cd #{dir} && pdflatex documento.tex"
    system "cd #{dir} && pdflatex documento.tex"
    system "cd #{dir} && pdflatex documento.tex"
  end
end

puts documents.keys

task :documents => documents.keys.map { |k| k + '/documento.pdf' }

task :clean do
  # system "rm -f *~ *.toc *.log *.lof *.aux class_*.tex predicate_*.tex"
  # system "rm -f node_predicates/*~ node_predicates/predicates.tex node_predicates/predicate_*.tex"
  # system "rm -f node_classes/*~ node_classes/classes.tex node_classes/class_*.tex"
  # system "rm -f figures/*~ figures/dia-*.svg figures/dia-*.pdf"
  system "rm -f schemas/classes/*.aux"
  system "rm -f schemas/predicates/*.aux"
  documents.keys.each do |dir|
    system "rm -f #{documents[dir][:class_files].join(' ')}"
    system "rm -f #{documents[dir][:predicate_files].join(' ')}"
  end
end

# Para limpiar...
task :clobber => :clean do
  documents.keys.each do |dir|
    system "rm -f #{dir}/documento.pdf"
  end
end
